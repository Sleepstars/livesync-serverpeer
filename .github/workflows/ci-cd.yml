name: Docker Build and Push

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.2.11

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.deno
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: deno task install

      - name: Lint code
        run: deno lint

      - name: Format check
        run: deno fmt --check

      - name: Type check
        run: deno check src/main.ts

  # Build Docker images for AMD64
  build-amd64:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.meta.outputs.json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Self-hosted LiveSync headless-peer for p2p synchronisation
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push AMD64 image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build Docker images for ARM64 using native ARM runners
  build-arm64:
    needs: build-and-test
    runs-on: ubuntu-latest-arm64
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-arm64
            type=ref,event=pr,suffix=-arm64
            type=sha,prefix={{branch}}-,suffix=-arm64
            type=raw,value=latest-arm64,enable={{is_default_branch}}
            type=semver,pattern={{version}},suffix=-arm64
            type=semver,pattern={{major}}.{{minor}},suffix=-arm64
            type=semver,pattern={{major}},suffix=-arm64

      - name: Build and push ARM64 image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create multi-platform manifest
  create-manifest:
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest
        run: |
          # Extract image name and tags from metadata
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

          # Get the branch or tag name
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION_NO_V="${VERSION#v}"

            # Create manifests for version tags
            docker buildx imagetools create -t "${IMAGE_NAME}:${VERSION_NO_V}" \
              "${IMAGE_NAME}:${VERSION_NO_V}-arm64" \
              "${IMAGE_NAME}:${VERSION_NO_V}"

            # Create major.minor manifest if it's a semantic version
            if [[ "$VERSION_NO_V" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              MAJOR_MINOR=$(echo "$VERSION_NO_V" | cut -d. -f1-2)
              MAJOR=$(echo "$VERSION_NO_V" | cut -d. -f1)

              docker buildx imagetools create -t "${IMAGE_NAME}:${MAJOR_MINOR}" \
                "${IMAGE_NAME}:${VERSION_NO_V}-arm64" \
                "${IMAGE_NAME}:${VERSION_NO_V}"

              docker buildx imagetools create -t "${IMAGE_NAME}:${MAJOR}" \
                "${IMAGE_NAME}:${VERSION_NO_V}-arm64" \
                "${IMAGE_NAME}:${VERSION_NO_V}"
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Create latest manifest for main branch
            docker buildx imagetools create -t "${IMAGE_NAME}:latest" \
              "${IMAGE_NAME}:latest-arm64" \
              "${IMAGE_NAME}:main"
          fi

          # Create SHA-based manifest
          SHA_SHORT="${{ github.sha }}"
          SHA_SHORT="${SHA_SHORT:0:7}"
          BRANCH_NAME="${{ github.ref_name }}"

          docker buildx imagetools create -t "${IMAGE_NAME}:${BRANCH_NAME}-${SHA_SHORT}" \
            "${IMAGE_NAME}:${BRANCH_NAME}-${SHA_SHORT}-arm64" \
            "${IMAGE_NAME}:${BRANCH_NAME}-${SHA_SHORT}"

  # Deployment notification
  notify-deployment:
    needs: [create-manifest]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Deployment summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available tags:**" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION_NO_V="${VERSION#v}"
            echo "- \`${VERSION_NO_V}\` (release)" >> $GITHUB_STEP_SUMMARY
            if [[ "$VERSION_NO_V" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              MAJOR_MINOR=$(echo "$VERSION_NO_V" | cut -d. -f1-2)
              MAJOR=$(echo "$VERSION_NO_V" | cut -d. -f1)
              echo "- \`${MAJOR_MINOR}\` (major.minor)" >> $GITHUB_STEP_SUMMARY
              echo "- \`${MAJOR}\` (major)" >> $GITHUB_STEP_SUMMARY
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "- \`latest\` (main branch)" >> $GITHUB_STEP_SUMMARY
          fi

          SHA_SHORT="${{ github.sha }}"
          SHA_SHORT="${SHA_SHORT:0:7}"
          BRANCH_NAME="${{ github.ref_name }}"
          echo "- \`${BRANCH_NAME}-${SHA_SHORT}\` (commit)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Architectures:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY